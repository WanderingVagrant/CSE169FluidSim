// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Init1
#pragma kernel AddvectDense
#pragma kernel ApplyForce
#pragma kernel JacobiVisc
#pragma kernel JacobiPress
#pragma kernel ProjectVel
#pragma kernel AdvectVel

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture3D<float4> dense;
RWTexture3D<float4> denseold;
RWTexture3D<float4> scalar;
RWTexture3D<float4> scalarold;
RWTexture3D<float4> vel;
RWTexture3D<float4> velold;
SamplerState samplervel;
float dt;
float vis;




//Sets Velocity to zero everywhere and adds a ball of density near the top
[numthreads(4,4,4)]
void Init1 (uint3 id : SV_DispatchThreadID, uint3 gid : SV_GroupID)
{
    // TODO: insert actual code here!
    if ((gid.x < 20 && gid.x > 11) && (gid.z < 20 && gid.z > 11) && (gid.y < 28 && gid.y > 19)) {
        dense[id] = float4(0, 0, 0, 1);
    }
    else {
        dense[id] = float4(0, 0, 0, 0);
    }

    vel[id] = float4(0, 0, 0, 0);
    scalar[id] = float4(0, 0, 0, 0);
}

[numthreads(4, 4, 4)]
void ApplyForce(uint3 id : SV_DispatchThreadID) {

}

[numthreads(4, 4, 4)]
void JacobiVisc(uint3 id : SV_DispatchThreadID) {

}

[numthreads(4, 4, 4)]
void JacobiPress(uint3 id : SV_DispatchThreadID) {

}

[numthreads(4, 4, 4)]
void ProjectVel(uint3 id : SV_DispatchThreadID) {

}

//Simulates the velocity of timestep dt
[numthreads(4, 4, 4)]
void AdvectVel(uint3 id : SV_DispatchThreadID)
{
    //float4 temp = float4(0, 0, 0, 0);
    //Advect
    //vel[id] = velold.Sample(samplervel, id - velold[id] * dt);
}

//Simulates the velocity of timestep dt
[numthreads(4, 4, 4)]
void AddvectDense(uint3 id : SV_DispatchThreadID)
{
    //float4 temp = float4(0, 0, 0, 0);
    //Advect
    //vel[id] = velold.Sample(samplervel, id - velold[id] * dt);
}